#!/usr/bin/env node

const childProcess = require('child_process');
const program = require('commander');

const evmConfig = require('./evm-config');
const { color, fatal } = require('./util');

program.description('Electron build tool').usage('<command> [commandArgs...]');

program
  .command('init [options] <name>', 'Create a new build config')
  .alias('new')
  .command('sync [gclientArgs...]', 'Get / update source code')
  .command('build [options]', 'Build Electron and other things')
  .alias('make');

program
  .command('start [electronArgs...]')
  .alias('run')
  .allowUnknownOption()
  .description('Run the Electron build')
  .action(() => {
    try {
      const exec = evmConfig.execOf(evmConfig.current());
      const args = program.parseOptions(program.rawArgs.slice(2)).unknown;
      const opts = { stdio: ['ignore', 'inherit', 'ignore'] };
      console.log(color.childExec(exec, args, opts));
      childProcess.execFileSync(exec, args, opts);
    } catch (e) {
      fatal(e);
    }
  });

program
  .command('node [electronArgs...]')
  .allowUnknownOption()
  .description('Run the Electron build as if it were a Node.js executable')
  .action(() => {
    try {
      const exec = evmConfig.execOf(evmConfig.current());
      const args = program.parseOptions(program.rawArgs.slice(2)).unknown;
      const opts = {
        env: { ...process.env, ELECTRON_RUN_AS_NODE: '1' },
        stdio: ['ignore', 'inherit', 'ignore'],
      };
      console.log(color.childExec(exec, args, opts));
      childProcess.execFileSync(exec, args, opts);
    } catch (e) {
      fatal(e);
    }
  });

program.command('debug', 'Run the Electron build with a debugger (gdb or lldb)');

program
  .command('use <name>')
  .description('Use build config <name> when running other `e` commands')
  .action(name => {
    try {
      evmConfig.setCurrent(name);
      console.log(`Now using config ${color.config(name)}`);
    } catch (e) {
      fatal(e);
    }
  });

program
  .command('show <subcommand>', 'Show info about the current build config')
  .command('test [specRunnerArgs...]', `Run Electron's spec runner`)
  .command('pr [options]', 'Open a GitHub URL where you can PR your changes')
  .command('patches <basename>', 'Refresh the patches in $root/src/electron/patches/$basename');

program.on('--help', () => {
  console.log(`
See https://github.com/electron/build-tools/blob/master/README.md for usage.`);
});

program.parse(process.argv);
